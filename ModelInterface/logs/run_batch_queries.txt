InterfaceMain: batchFile: ..\output\gcam_diagnostics\batch_queries\xmldb_batch_detailed_ind.xml
Running headless? true
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703561757076
Before Function: 1703561757076
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='cement' )]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703561757076
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='cement' )]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703561757076
After build Tree: 1703561760024
After Add table: 1703561760027
Completed 100.0% of batch queries.
After build Tree: 1703561761736
After Add table: 1703561761736
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703561761850
Before Function: 1703561761850
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='chemical energy use' or @name='chemical feedstocks')]//*[@type='input']/demand-physical/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='chemical energy use' or @name='chemical feedstocks')]//*[@type='input']/demand-physical/node()
In Function: 1703561761851
In Function: 1703561761851
After build Tree: 1703561767411
After Add table: 1703561767412
Completed 100.0% of batch queries.
After build Tree: 1703561769394
After Add table: 1703561769394
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703561769499
Before Function: 1703561769499
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='chemical energy use' or @name='chemical feedstocks')]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='chemical energy use' or @name='chemical feedstocks')]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703561769499
In Function: 1703561769500
After build Tree: 1703561771980
After Add table: 1703561771983
Completed 100.0% of batch queries.
After build Tree: 1703561772923
After Add table: 1703561772923
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703561773025
Before Function: 1703561773025
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
            CO2/emissions/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
            CO2/emissions/node()
In Function: 1703561773026
In Function: 1703561773026
After build Tree: 1703561875318
After Add table: 1703561875348
Completed 100.0% of batch queries.
After build Tree: 1703561892212
After Add table: 1703561892214
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703561892618
Before Function: 1703561892618
About to perform query:  
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($inputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('unconventional oil production', "electricity", "cement", "N fertilizer","iron and steel" ),
$inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]))
then 
local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $inputName := $inputNameQueue[1],
                        $newInputNameQueue := remove($inputNameQueue, 1),
                        $useInputs := $currTree//*[@type='input' and @name=$inputName],
                        $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
                        $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
                                          return element input {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useInputs/demand-physical[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := if(empty($useSectors)) then
                                         $coefs
                                     else
                                         $coefs | element sector {
                                            attribute name { $inputName },
                                            for $output in $useSectors
                                            return element output {
                                                       attribute name { $output },
                                                       for $inputSum in $totalInputSum
                                                       let $outputSum := sum($useInputs[ancestor::*[@type='sector' and @name=$output]]/demand-physical[@vintage=$inputSum/@vintage])
                                                       return element coef {
                                                                  attribute vintage { $inputSum/@vintage },
                                                                  text { $outputSum div $inputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
                for $output in $coefs[@name=$outputName]/output
                return local:apply-coefs($output/@name,
                    for $year in distinct-values($emissions/@year)
                    let $emissThisVintage := $emissions[@year=$year],
                        $firstEmiss := $emissThisVintage[1],
                        $emissSum := sum($emissThisVintage),
                        $coefThisVintage := $output/coef[@vintage=$year]
                    where $coefThisVintage > 0
                    return element { local-name($firstEmiss) } {
                            $firstEmiss/@*,
                            text{ $emissSum * $coefThisVintage }
                        }
	       			, $coefs)
            else if( abs(sum($emissions)) > 0.001) then
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' },
                    (: $emissions :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $e in $emissions
                    return element emissions { $e/@*, text{ $e/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' }(:,
                    $emissions:)
                }
        };
		declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currEmissSectors := $currTree/*[@type='sector' and descendant::CO2],
                 $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false())
				 return
				    for $sectorName in distinct-values($currEmissSectors/@name)
                    return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2/emissions, $coefs))//text()
			 	 } 
	 	 };
		 local:run-emiss-by-enduse(('Reference_high_demand 2023-25-12T22:48:38+08:00', 'Tax_100_high_demand 2023-25-12T22:48:39+08:00', 'Reference_low_demand 2023-26-12T08:20:20+08:00', 'Tax_100_low_demand 2023-24-12T16:19:55+08:00'), ('China', 'AH', 'BJ', 'CQ', 'FJ', 'GD', 'GS', 'GX', 'GZ', 'HA', 'HB', 'HE', 'HI', 'HL', 'HN', 'JL', 'JS', 'JX', 'LN', 'NM', 'NX', 'QH', 'SC', 'SD', 'SH', 'SN', 'SX', 'TJ', 'XJ', 'XZ', 'YN', 'ZJ'), ())
               
               
About to perform query:  
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($inputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('unconventional oil production', "electricity", "cement", "N fertilizer","iron and steel" ),
$inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]))
then 
local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $inputName := $inputNameQueue[1],
                        $newInputNameQueue := remove($inputNameQueue, 1),
                        $useInputs := $currTree//*[@type='input' and @name=$inputName],
                        $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
                        $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
                                          return element input {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useInputs/demand-physical[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := if(empty($useSectors)) then
                                         $coefs
                                     else
                                         $coefs | element sector {
                                            attribute name { $inputName },
                                            for $output in $useSectors
                                            return element output {
                                                       attribute name { $output },
                                                       for $inputSum in $totalInputSum
                                                       let $outputSum := sum($useInputs[ancestor::*[@type='sector' and @name=$output]]/demand-physical[@vintage=$inputSum/@vintage])
                                                       return element coef {
                                                                  attribute vintage { $inputSum/@vintage },
                                                                  text { $outputSum div $inputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
                for $output in $coefs[@name=$outputName]/output
                return local:apply-coefs($output/@name,
                    for $year in distinct-values($emissions/@year)
                    let $emissThisVintage := $emissions[@year=$year],
                        $firstEmiss := $emissThisVintage[1],
                        $emissSum := sum($emissThisVintage),
                        $coefThisVintage := $output/coef[@vintage=$year]
                    where $coefThisVintage > 0
                    return element { local-name($firstEmiss) } {
                            $firstEmiss/@*,
                            text{ $emissSum * $coefThisVintage }
                        }
	       			, $coefs)
            else if( abs(sum($emissions)) > 0.001) then
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' },
                    (: $emissions :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $e in $emissions
                    return element emissions { $e/@*, text{ $e/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' }(:,
                    $emissions:)
                }
        };
		declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currEmissSectors := $currTree/*[@type='sector' and descendant::CO2],
                 $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false())
				 return
				    for $sectorName in distinct-values($currEmissSectors/@name)
                    return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2/emissions, $coefs))//text()
			 	 } 
	 	 };
		 local:run-emiss-by-enduse(('Reference_high_demand 2023-25-12T22:48:38+08:00', 'Tax_100_high_demand 2023-25-12T22:48:39+08:00', 'Reference_low_demand 2023-26-12T08:20:20+08:00', 'Tax_100_low_demand 2023-24-12T16:19:55+08:00'), ('Global'), ())
               
               
In Function: 1703561892620
In Function: 1703561892620
After build Tree: 1703563671436
After Add table: 1703563671437
Completed 100.0% of batch queries.
After build Tree: 1703566616982
After Add table: 1703566616982
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566617264
Before Function: 1703566617264
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/Marketplace/market[true() and contains(@name,'CO2')]/price/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/Marketplace/market[true() and contains(@name,'CO2') and ContainedRegion[(child::text() = 'China') or (child::text() = 'AH') or (child::text() = 'BJ') or (child::text() = 'CQ') or (child::text() = 'FJ') or (child::text() = 'GD') or (child::text() = 'GS') or (child::text() = 'GX') or (child::text() = 'GZ') or (child::text() = 'HA') or (child::text() = 'HB') or (child::text() = 'HE') or (child::text() = 'HI') or (child::text() = 'HL') or (child::text() = 'HN') or (child::text() = 'JL') or (child::text() = 'JS') or (child::text() = 'JX') or (child::text() = 'LN') or (child::text() = 'NM') or (child::text() = 'NX') or (child::text() = 'QH') or (child::text() = 'SC') or (child::text() = 'SD') or (child::text() = 'SH') or (child::text() = 'SN') or (child::text() = 'SX') or (child::text() = 'TJ') or (child::text() = 'XJ') or (child::text() = 'XZ') or (child::text() = 'YN') or (child::text() = 'ZJ') ] ]/price/node()
In Function: 1703566617264
In Function: 1703566617264
After build Tree: 1703566622878
After Add table: 1703566622878
Completed 100.0% of batch queries.
After build Tree: 1703566622902
After Add table: 1703566622902
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566622998
Before Function: 1703566622998
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
            CO2/emissions-sequestered/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
            CO2/emissions-sequestered/node()
In Function: 1703566622998
In Function: 1703566622998
After build Tree: 1703566684357
After Add table: 1703566684362
Completed 100.0% of batch queries.
After build Tree: 1703566727933
After Add table: 1703566727933
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566728041
Before Function: 1703566728042
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='chemical' or (exists(child::keyword[@final-energy='industry'])))]/
               			*[@type='subsector' ]/*[@type='technology']/cost/text()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='chemical' or (exists(child::keyword[@final-energy='industry'])))]/
               			*[@type='subsector' ]/*[@type='technology']/cost/text()
In Function: 1703566728042
In Function: 1703566728042
After build Tree: 1703566739392
After Add table: 1703566739409
Completed 100.0% of batch queries.
After build Tree: 1703566743444
After Add table: 1703566743445
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566743801
Before Function: 1703566743801
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' ) and not(contains(@name, 'water_td'))]//
                  *[@type='subsector' and not (@name='elect_td_bld')]//
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                
In Function: 1703566743801
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' ) and not(contains(@name, 'water_td'))]//
                  *[@type='subsector' and not (@name='elect_td_bld')]//
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                   *[@type='input' and not( contains( @name, 'water')) and @name != 'oil-credits']/
                   demand-physical/node()
                
In Function: 1703566743801
After build Tree: 1703566784199
After Add table: 1703566784205
Completed 100.0% of batch queries.
After build Tree: 1703566787277
After Add table: 1703566787278
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566787440
Before Function: 1703566787440
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='electricity' or 
                        @name='base load generation' or @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or 
                        @name='elect_td_bld' or @name='industrial energy use')]//
                        *[@type='subsector']//*[@type='technology' and not (@name='electricity' or @name='elect_td_bld')]/
                        *[@type='output' (:collapse:) and (@name='electricity' or @name='base load generation' or @name='intermediate generation' or 
                        @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
                        physical-output/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='electricity' or 
                        @name='base load generation' or @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or 
                        @name='elect_td_bld' or @name='industrial energy use')]//
                        *[@type='subsector']//*[@type='technology' and not (@name='electricity' or @name='elect_td_bld')]/
                        *[@type='output' (:collapse:) and (@name='electricity' or @name='base load generation' or @name='intermediate generation' or 
                        @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
                        physical-output/node()
In Function: 1703566787440
In Function: 1703566787440
After build Tree: 1703566821108
After Add table: 1703566821114
Completed 100.0% of batch queries.
After build Tree: 1703566825921
After Add table: 1703566825922
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566826625
Before Function: 1703566826625
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' or @name='elect_td_ind'
               or @name='elect_td_trn')]/cost/text()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='electricity' or @name='base load generation' or 
               @name='intermediate generation' or @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld' or @name='elect_td_ind'
               or @name='elect_td_trn')]/cost/text()
In Function: 1703566826625
In Function: 1703566826625
After build Tree: 1703566828185
After Add table: 1703566828185
Completed 100.0% of batch queries.
After build Tree: 1703566828484
After Add table: 1703566828484
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566828576
Before Function: 1703566828576
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable'  or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable'  or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()
In Function: 1703566828576
In Function: 1703566828576
After build Tree: 1703566881159
After Add table: 1703566881168
Completed 100.0% of batch queries.
After build Tree: 1703566905032
After Add table: 1703566905032
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566905196
Before Function: 1703566905196
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='wholesale gas' or @name='delivered gas' or
            @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or
            @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or
            @name='H2 enduse'or @name='refined liquids industrial' or @name='refined liquids enduse')]/
            cost/text()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='wholesale gas' or @name='delivered gas' or
            @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or
            @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or
            @name='H2 enduse'or @name='refined liquids industrial' or @name='refined liquids enduse')]/
            cost/text()
In Function: 1703566905196
In Function: 1703566905196
After build Tree: 1703566908786
After Add table: 1703566908786
Completed 100.0% of batch queries.
After build Tree: 1703566909072
After Add table: 1703566909072
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566909157
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/climate-model/global-mean-temperature/text()
In Function: 1703566909157
After build Tree: 1703566909316
After Add table: 1703566909317
Completed 100.0% of batch queries.
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566909431
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()
Before Function: 1703566909431
In Function: 1703566909431
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/*[@type='input']/
               demand-physical/node()
In Function: 1703566909431
After build Tree: 1703566919633
After Add table: 1703566919635
Completed 100.0% of batch queries.
After build Tree: 1703566921725
After Add table: 1703566921725
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566921911
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()
Before Function: 1703566921911
In Function: 1703566921911
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='H2 central production' or @name='H2 forecourt production')]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()
In Function: 1703566921911
After build Tree: 1703566925514
After Add table: 1703566925516
Completed 100.0% of batch queries.
After build Tree: 1703566926723
After Add table: 1703566926723
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566926822
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()
In Function: 1703566926822
Before Function: 1703566926822
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/
               *[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()
In Function: 1703566926823
After build Tree: 1703566945500
After Add table: 1703566945514
Completed 100.0% of batch queries.
After build Tree: 1703566954340
After Add table: 1703566954341
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566954487
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and contains(@name,'feedstocks')]//
               *[@type='input' and @name != 'oil-credits']/demand-physical/node()
Before Function: 1703566954487
In Function: 1703566954487
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and contains(@name,'feedstocks')]//
               *[@type='input' and @name != 'oil-credits']/demand-physical/node()
In Function: 1703566954488
After build Tree: 1703566955845
After Add table: 1703566955846
Completed 100.0% of batch queries.
After build Tree: 1703566956093
After Add table: 1703566956093
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566956195
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               output-primary/physical-output/node()
Before Function: 1703566956195
In Function: 1703566956195
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               output-primary/physical-output/node()
In Function: 1703566956195
After build Tree: 1703566975745
After Add table: 1703566975748
Completed 100.0% of batch queries.
After build Tree: 1703566981551
After Add table: 1703566981551
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566981663
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='iron and steel')]//*[@type='input']/demand-physical/node()
Before Function: 1703566981663
In Function: 1703566981663
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='iron and steel')]//*[@type='input']/demand-physical/node()
In Function: 1703566981663
After build Tree: 1703566988783
After Add table: 1703566988784
Completed 100.0% of batch queries.
After build Tree: 1703566991787
After Add table: 1703566991787
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566991915
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='iron and steel')]/
               *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
               *[@type='output']/physical-output/node()
In Function: 1703566991915
Before Function: 1703566991915
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='iron and steel')]/
               *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
               *[@type='output']/physical-output/node()
In Function: 1703566991915
After build Tree: 1703566994050
After Add table: 1703566994052
Completed 100.0% of batch queries.
After build Tree: 1703566995083
After Add table: 1703566995083
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703566995208
Before Function: 1703566995208
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and not(@name='renewable')]/
               demand-physical[@unit='EJ']/node()
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and not(@name='renewable')]/
               demand-physical[@unit='EJ']/node()
In Function: 1703566995208
In Function: 1703566995208
After build Tree: 1703567007765
After Add table: 1703567007776
Completed 100.0% of batch queries.
After build Tree: 1703567011956
After Add table: 1703567011956
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567012106
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/GDP/gdp-per-capita-mer/text()
In Function: 1703567012106
Before Function: 1703567012106
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/GDP/gdp-per-capita-mer/text()
In Function: 1703567012106
After build Tree: 1703567018151
After Add table: 1703567018152
Completed 100.0% of batch queries.
After build Tree: 1703567020387
After Add table: 1703567020387
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567020482
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='cement' )]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703567020482
Before Function: 1703567020482
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='cement' )]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703567020482
After build Tree: 1703567021415
After Add table: 1703567021415
Completed 100.0% of batch queries.
After build Tree: 1703567021722
After Add table: 1703567021722
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567021817
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/demographics/populationMiniCAM/total-population/node()
In Function: 1703567021818
Before Function: 1703567021818
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/demographics/populationMiniCAM/total-population/node()
In Function: 1703567021818
After build Tree: 1703567022209
After Add table: 1703567022209
Completed 100.0% of batch queries.
After build Tree: 1703567022359
After Add table: 1703567022359
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567022438
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='cement' )]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703567022438
Before Function: 1703567022438
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='cement' )]/
            			   *[@type='subsector' and not(@name='Imports')]/*[@type='technology']/
            			   *[@type='output']/physical-output/node()
In Function: 1703567022438
After build Tree: 1703567023341
After Add table: 1703567023341
Completed 100.0% of batch queries.
After build Tree: 1703567023674
After Add table: 1703567023674
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567023777
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/climate-model/forcing-total/text()
In Function: 1703567023777
Before Function: 1703567023777
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/climate-model/forcing-total/text()
In Function: 1703567023777
After build Tree: 1703567023847
After Add table: 1703567023847
Completed 100.0% of batch queries.
After build Tree: 1703567023847
After Add table: 1703567023847
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Didn't find builder for LUC emissions by region query going to use defaults
Before Function: 1703567023942
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]//LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                land-use-change-emission[@year>1970]/text()
In Function: 1703567023943
Before Function: 1703567023943
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region//LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                land-use-change-emission[@year>1970]/text()
In Function: 1703567023943
After build Tree: 1703567077216
After Add table: 1703567077216
Completed 100.0% of batch queries.
After build Tree: 1703567157412
After Add table: 1703567157412
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567157505
Before Function: 1703567157505
About to perform query:  
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy(('Reference_high_demand 2023-25-12T22:48:38+08:00', 'Tax_100_high_demand 2023-25-12T22:48:39+08:00', 'Reference_low_demand 2023-26-12T08:20:20+08:00', 'Tax_100_low_demand 2023-24-12T16:19:55+08:00'), ('China', 'AH', 'BJ', 'CQ', 'FJ', 'GD', 'GS', 'GX', 'GZ', 'HA', 'HB', 'HE', 'HI', 'HL', 'HN', 'JL', 'JS', 'JX', 'LN', 'NM', 'NX', 'QH', 'SC', 'SD', 'SH', 'SN', 'SX', 'TJ', 'XJ', 'XZ', 'YN', 'ZJ'), ())
                 
            
About to perform query:  
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy(('Reference_high_demand 2023-25-12T22:48:38+08:00', 'Tax_100_high_demand 2023-25-12T22:48:39+08:00', 'Reference_low_demand 2023-26-12T08:20:20+08:00', 'Tax_100_low_demand 2023-24-12T16:19:55+08:00'), ('Global'), ())
                 
            
In Function: 1703567157506
In Function: 1703567157506
After build Tree: 1703567227818
After Add table: 1703567227818
Completed 100.0% of batch queries.
After build Tree: 1703567305925
After Add table: 1703567305925
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567306032
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region[ (@name='China') or (@name='AH') or (@name='BJ') or (@name='CQ') or (@name='FJ') or (@name='GD') or (@name='GS') or (@name='GX') or (@name='GZ') or (@name='HA') or (@name='HB') or (@name='HE') or (@name='HI') or (@name='HL') or (@name='HN') or (@name='JL') or (@name='JS') or (@name='JX') or (@name='LN') or (@name='NM') or (@name='NX') or (@name='QH') or (@name='SC') or (@name='SD') or (@name='SH') or (@name='SN') or (@name='SX') or (@name='TJ') or (@name='XJ') or (@name='XZ') or (@name='YN') or (@name='ZJ') ]/*[@type='sector' and (@name='refining' or @name='refined liquids enduse' or
               @name='refined liquids industrial')]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()
In Function: 1703567306032
Before Function: 1703567306032
About to perform query: collection()/scenario[ (@name='Reference_high_demand' and @date='2023-25-12T22:48:38+08:00') or (@name='Tax_100_high_demand' and @date='2023-25-12T22:48:39+08:00') or (@name='Reference_low_demand' and @date='2023-26-12T08:20:20+08:00') or (@name='Tax_100_low_demand' and @date='2023-24-12T16:19:55+08:00') ]/world/region/*[@type='sector' and (@name='refining' or @name='refined liquids enduse' or
               @name='refined liquids industrial')]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()
In Function: 1703567306032
After build Tree: 1703567307946
After Add table: 1703567307947
Completed 100.0% of batch queries.
After build Tree: 1703567310774
After Add table: 1703567310774
INFO; Successfully ran batch query
The database is not open.
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1703567310895
Before Function: 1703567310895
About to perform query:  
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) > 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) > 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary(('Reference_high_demand 2023-25-12T22:48:38+08:00', 'Tax_100_high_demand 2023-25-12T22:48:39+08:00', 'Reference_low_demand 2023-26-12T08:20:20+08:00', 'Tax_100_low_demand 2023-24-12T16:19:55+08:00'), ('China', 'AH', 'BJ', 'CQ', 'FJ', 'GD', 'GS', 'GX', 'GZ', 'HA', 'HB', 'HE', 'HI', 'HL', 'HN', 'JL', 'JS', 'JX', 'LN', 'NM', 'NX', 'QH', 'SC', 'SD', 'SH', 'SN', 'SX', 'TJ', 'XJ', 'XZ', 'YN', 'ZJ'), ())
         
         
In Function: 1703567310897
About to perform query:  
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) > 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) > 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary(('Reference_high_demand 2023-25-12T22:48:38+08:00', 'Tax_100_high_demand 2023-25-12T22:48:39+08:00', 'Reference_low_demand 2023-26-12T08:20:20+08:00', 'Tax_100_low_demand 2023-24-12T16:19:55+08:00'), ('Global'), ())
         
         
In Function: 1703567310898
Completed 100.0% of batch queries.
WARNING; Batch queries finished with 1 error.
The database is not open.
YES/NO/CANCEL; Could not open the database.  Attempt to create a new one?
WARNING doing so will delete all files in the directory.; NO
The database is not open.
YES/NO/CANCEL; Could not open the database.  Attempt to create a new one?
WARNING doing so will delete all files in the directory.; NO
The database is not open.
YES/NO/CANCEL; Could not open the database.  Attempt to create a new one?
WARNING doing so will delete all files in the directory.; NO
The database is not open.
YES/NO/CANCEL; Could not open the database.  Attempt to create a new one?
WARNING doing so will delete all files in the directory.; NO
The database is not open.
YES/NO/CANCEL; Could not open the database.  Attempt to create a new one?
WARNING doing so will delete all files in the directory.; NO
INFO; Finished running batch file
